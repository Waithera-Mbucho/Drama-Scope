/DATA/
// Minimal sample list‚Äîadd as many dramas as you want!
const dramas = [
  {
    title: "Mr. Queen",
    year: 2020,
    country: "Korea",
    poster: "https://i.imgur.com/QniGQ1N.jpg",
    genres: ["Romance", "Comedy / Romantic Comedy (Rom-Com)", "Historical / Period Drama (Sageuk in Korean)"],
    tropes: ["Body Swapping", "Strong Female Lead"]
  },
  {
    title: "Extraordinary Attorney Woo",
    year: 2022,
    country: "Korea",
    poster: "https://i.imgur.com/3ete6mv.jpg",
    genres: ["Modern Slice of Life", "Comedy / Romantic Comedy (Rom-Com)"],
    tropes: ["Strong Female Lead", "Office Romance"]
  },
  {
    title: "The Untamed",
    year: 2019,
    country: "China",
    poster: "https://i.imgur.com/l2kqG8L.jpg",
    genres: ["Fantasy", "Historical / Period Drama (Sageuk in Korean)"],
    tropes: ["Boys‚Äô Love (BL)", "Immortals / Mythical Beings", "Tragic Love"]
  },
  {
    title: "Bad Buddy",
    year: 2021,
    country: "Thailand",
    poster: "https://i.imgur.com/0PByy12.jpg",
    genres: ["Romance", "Modern Slice of Life"],
    tropes: ["Boys‚Äô Love (BL)", "School / Campus Drama", "Love After Betrayal"]
  }
];

/* ---------- FILTER DEFINITIONS ---------- */
const coreGenres = [
  "Romance", "Comedy / Romantic Comedy (Rom-Com)", "Melodrama", "Fantasy",
  "Historical / Period Drama (Sageuk in Korean)", "Modern Slice of Life", "Action / Thriller / Suspense",
  "Mystery / Crime", "Supernatural", "Horror / Psychological"
];

const tropes = [
  "Revenge / Vendetta", "Tragic Love", "Love Triangle", "Secret Identity",
  "Love After Betrayal", "Reincarnation / Past Lives", "Time Travel",
  "Parallel Universes", "Immortals / Mythical Beings", "Body Swapping",
  "Strong Female Lead", "Cold Male Lead / Tsundere", "Chaebol / CEO Romance",
  "Poor Girl x Rich Guy", "Boys‚Äô Love (BL)", "School / Campus Drama",
  "Office Romance", "Celebrity & Idol Industry", "Contract Marriage / Fake Relationship",
  "Noona Romance (Older Woman / Younger Man)", "Palace Politics", "Medical / Legal Dramas"
];

/* ---------- DOM REFERENCES ---------- */
const genreFiltersDiv = document.getElementById("genreFilters");
const tropeFiltersDiv = document.getElementById("tropeFilters");
const searchBar = document.getElementById("searchBar");
const dramaListDiv = document.getElementById("dramaList");

/* ---------- HELPERS ---------- */
function createCheckbox(name, group) {
  const id = `${group}-${name}`.replace(/\s+/g, "-");
  return `
    <label style="display:block;">
      <input type="checkbox" value="${name}" data-group="${group}" id="${id}" />
      ${name}
    </label>`;
}

/* ---------- UI INITIALISATION ---------- */
genreFiltersDiv.innerHTML = coreGenres.map(g => createCheckbox(g, "genre")).join("");
tropeFiltersDiv.innerHTML = tropes.map(t => createCheckbox(t, "trope")).join("");

renderList(dramas);                  // show everything at first load
attachEventListeners();              // start listening for changes

/* ---------- MAIN RENDER + FILTER LOGIC ---------- */
function renderList(list) {
  if (!list.length) {
    dramaListDiv.innerHTML = "<p>No dramas match your filters ü§∑‚Äç‚ôÄÔ∏è</p>";
    return;
  }

  dramaListDiv.innerHTML = list.map(d => `
    <div class="drama-card">
      <img src="${d.poster}" alt="${d.title} poster">
      <h3>${d.title}</h3>
      <p>${d.year} ‚Ä¢ ${d.country}</p>
      ${d.genres.map(g => `<span class="badge">${g}</span>`).join("")}
      ${d.tropes.slice(0,3).map(t => `<span class="badge">${t}</span>`).join("")}
    </div>
  `).join("");
}

function filterDramas() {
  const searchTerm = searchBar.value.trim().toLowerCase();

  // collect selected genres & tropes
  const selectedGenres = [...document.querySelectorAll('input[data-group="genre"]:checked')].map(cb => cb.value);
  const selectedTropes = [...document.querySelectorAll('input[data-group="trope"]:checked')].map(cb => cb.value);

  const filtered = dramas.filter(d => {
    // title search
    const matchesSearch = d.title.toLowerCase().includes(searchTerm);

    // genre filter: every selected genre must appear in drama.genres
    const matchesGenres = selectedGenres.every(g => d.genres.includes(g));

    // trope filter: every selected trope must appear in drama.tropes
    const matchesTropes = selectedTropes.every(t => d.tropes.includes(t));

    return matchesSearch && matchesGenres && matchesTropes;
  });

  renderList(filtered);
}

function attachEventListeners() {
  // search
  searchBar.addEventListener("input", filterDramas);

  // checkboxes (delegated)
  document.getElementById("filters").addEventListener("change", e => {
    if (e.target.matches('input[type="checkbox"]')) filterDramas();
  });
}
function addToWatchlist(drama) {
  const current = JSON.parse(localStorage.getItem('dramascope_watchlist')) || [];
  if (!current.some(d => d.title === drama.title)) {
    current.push(drama);
    localStorage.setItem('dramascope_watchlist', JSON.stringify(current));
    alert(` ${drama.title} added to your watchlist!`);
  } else {
    alert(`${drama.title} is already in your watchlist.`);
  }
}

